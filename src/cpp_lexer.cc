// THIS FILE AUTOGENERATED BY generate_cpp_lexer_data.py. DO NOT EDIT.

#include "lexer.h"

Lexer* MakeCppLexer() {
  Lexer* lexer = new Lexer("C++");

  // States
  LexerState* classname = lexer->AddState("classname");
  LexerState* if0 = lexer->AddState("if0");
  LexerState* macro = lexer->AddState("macro");
  LexerState* root = lexer->AddState("root");
  LexerState* string = lexer->AddState("string");

  // Transitions for classname
  classname->AddWithTransition("[a-zA-Z_][a-zA-Z0-9_]*", Lexer::NameClass, Lexer::Pop);
  classname->AddWithTransition("\\s*(?=>)", Lexer::Text, Lexer::Pop);

  // Transitions for if0
  if0->AddWithTransition("^\\s*#if.*?(?<!\\\\)\\n", Lexer::CommentPreproc, Lexer::Push);
  if0->AddWithTransition("^\\s*#endif.*?(?<!\\\\)\\n", Lexer::CommentPreproc, Lexer::Pop);
  if0->Add(".*?\\n", Lexer::Comment);

  // Transitions for macro
  macro->Add("[^/\\n]+", Lexer::CommentPreproc);
  macro->Add("/[*](.|\\n)*?[*]/", Lexer::CommentMultiline);
  macro->AddWithTransition("//.*?\\n", Lexer::CommentSingle, Lexer::Pop);
  macro->Add("/", Lexer::CommentPreproc);
  macro->Add("(?<=\\\\)\\n", Lexer::CommentPreproc);
  macro->AddWithTransition("\\n", Lexer::CommentPreproc, Lexer::Pop);

  // Transitions for root
  root->AddWithTransition("^#if\\s+0", Lexer::CommentPreproc, if0);
  root->AddWithTransition("^#", Lexer::CommentPreproc, macro);
  // TODO(<type 'function'>)   root->AddWithTransition("^((?:\\s|//.*?\\n|/[*].*?[*]/)+)(#if\\s+0)", <function callback at 0x02592830>, if0);
  // TODO(<type 'function'>)   root->AddWithTransition("^((?:\\s|//.*?\\n|/[*].*?[*]/)+)(#)", <function callback at 0x025928B0>, macro);
  root->Add("\\n", Lexer::Text);
  root->Add("\\s+", Lexer::Text);
  root->Add("\\\\\\n", Lexer::Text);
  root->Add("/(\\\\\\n)?/(\\n|(.|\\n)*?[^\\\\]\\n)", Lexer::CommentSingle);
  root->Add("/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/", Lexer::CommentMultiline);
  root->Add("[{}]", Lexer::Punctuation);
  root->AddWithTransition("L?\"", Lexer::LiteralString, string);
  root->Add("L?\'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\\'\\n])\'", Lexer::LiteralStringChar);
  root->Add("(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[LlUu]*", Lexer::LiteralNumberFloat);
  root->Add("(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?", Lexer::LiteralNumberFloat);
  root->Add("0x[0-9a-fA-F]+[LlUu]*", Lexer::LiteralNumberHex);
  root->Add("0[0-7]+[LlUu]*", Lexer::LiteralNumberOct);
  root->Add("\\d+[LlUu]*", Lexer::LiteralNumberInteger);
  root->Add("\\*/", Lexer::Error);
  root->Add("[~!%^&*+=|?:<>/-]", Lexer::Operator);
  root->Add("[()\\[\\],.;]", Lexer::Punctuation);
  root->Add("(asm|auto|break|case|catch|const|const_cast|continue|default|delete|do|dynamic_cast|else|enum|explicit|export|extern|for|friend|goto|if|mutable|namespace|new|operator|private|protected|public|register|reinterpret_cast|return|restrict|sizeof|static|static_cast|struct|switch|template|this|throw|throws|try|typedef|typeid|typename|union|using|volatile|virtual|while)\\b", Lexer::Keyword);
  // TODO(<type 'function'>)   root->AddWithTransition("(class)(\\s+)", <function callback at 0x025928F0>, classname);
  root->Add("(bool|int|long|float|short|double|char|unsigned|signed|void|wchar_t)\\b", Lexer::KeywordType);
  root->Add("(_{0,2}inline|naked|thread)\\b", Lexer::KeywordReserved);
  root->Add("__(asm|int8|based|except|int16|stdcall|cdecl|fastcall|int32|declspec|finally|int64|try|leave|wchar_t|w64|virtual_inheritance|uuidof|unaligned|super|single_inheritance|raise|noop|multiple_inheritance|m128i|m128d|m128|m64|interface|identifier|forceinline|event|assume)\\b", Lexer::KeywordReserved);
  root->Add("(__offload|__blockingoffload|__outer)\\b", Lexer::KeywordPseudo);
  root->Add("(true|false)\\b", Lexer::KeywordConstant);
  root->Add("NULL\\b", Lexer::NameBuiltin);
  root->Add("[a-zA-Z_][a-zA-Z0-9_]*:(?!:)", Lexer::NameLabel);
  root->Add("[a-zA-Z_][a-zA-Z0-9_]*", Lexer::Name);

  // Transitions for string
  string->AddWithTransition("\"", Lexer::LiteralString, Lexer::Pop);
  string->Add("\\\\([\\\\abfnrtv\"\\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})", Lexer::LiteralStringEscape);
  string->Add("[^\\\\\"\\n]+", Lexer::LiteralString);
  string->Add("\\\\\\n", Lexer::LiteralString);
  string->Add("\\\\", Lexer::LiteralString);

  return lexer;
}
